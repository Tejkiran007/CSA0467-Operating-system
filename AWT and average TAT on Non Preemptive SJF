#include <stdio.h>
#include <stdlib.h>

struct process {
    int pid;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

void swap(struct process* a, struct process* b) {
    struct process temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_burst_time(struct process* processes, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].burst_time > processes[j].burst_time) {
                swap(&processes[i], &processes[j]);
            }
        }
    }
}

void calculate_waiting_time(struct process* processes, int n) {
    processes[0].waiting_time = 0;
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
}

void calculate_turnaround_time(struct process* processes, int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process* processes = (struct process*) malloc(n * sizeof(struct process));

    for (int i = 0; i < n; i++) {
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
    }

    sort_by_burst_time(processes, n);
    calculate_waiting_time(processes, n);
    calculate_turnaround_time(processes, n);

    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");

    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("Average waiting time: %f\n", (float) total_waiting_time / n);
    printf("Average turnaround time: %f\n", (float) total_turnaround_time / n);

    free(processes);
    return 0;
}
